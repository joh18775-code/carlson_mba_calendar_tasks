<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Carlson MBA Task Manager Setup</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        /* UMN Colors */
        .bg-maroon { background-color: #7A0019; }
        .text-maroon { color: #7A0019; }
        .bg-gold { background-color: #FFCC33; }
        .text-gold { color: #FFCC33; }
        .hover\:bg-maroon-dark:hover { background-color: #620014; }

        /* Simple scrollbar styling */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f5f9;
        }
        ::-webkit-scrollbar-thumb {
            background: #94a3b8;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #64748b;
        }
    </style>
</head>
<body class="bg-slate-50 text-slate-800">

    <!-- Header Section -->
    <header class="bg-maroon text-center py-10">
        <img src="https://csom.umn.edu/sites/csom.umn.edu/files/carlson_school_of_management_university_of_minnesota_logo_pms110.png" alt="Carlson School of Management Logo" class="mx-auto mb-6 h-20 object-contain">
        <h1 class="text-3xl sm:text-4xl font-bold text-white">Carlson MBA Task Manager</h1>
        <p class="mt-2 text-lg text-slate-200">A Guide to Streamlining Your Coursework with Google Tasks</p>
    </header>

    <div class="container mx-auto max-w-4xl px-4 py-8 sm:py-12">
        <div class="space-y-8">

            <!-- Part 1: Set Up Google Sheet -->
            <section style="background-color: #FAEAB6;" class="p-6 rounded-xl shadow-sm border border-slate-200">
                <h2 class="text-2xl font-bold text-maroon mb-4">Part 1: Set Up Your Google Sheet</h2>
                <div class="space-y-6">
                    <div>
                        <h3 class="font-semibold text-lg mb-2">1. Make a Copy of the Sheet</h3>
                        <p class="text-slate-700">Start with the Carlson MBA template. Save a personal copy to your UMN Google Drive to begin.</p>
                        <a href="https://docs.google.com/spreadsheets/d/1HQVFjNe2zHAus_QVjBrQ785tH0WoJTlH5sCqJamc-Es/edit?gid=0#gid=0" target="_blank" rel="noopener noreferrer" class="inline-block mt-3 bg-maroon text-white font-semibold px-4 py-2 rounded-lg hover:bg-maroon-dark transition-colors">
                            Open Template
                        </a>
                    </div>
                    <div class="border-t border-yellow-800/20 pt-6">
                        <h3 class="font-semibold text-lg mb-2">2. Customize Your Dropdown Menus</h3>
                        <p class="text-slate-700">Navigate to the <code class="bg-slate-100 text-sm font-mono p-1 rounded">Dropdown Lists</code> tab. Update the columns with your specific Carlson courses, semesters, and assignment types to personalize your schedule.</p>
                    </div>
                </div>
            </section>

            <!-- Part 2: Set Up Google Tasks -->
            <section style="background-color: #FAEAB6;" class="p-6 rounded-xl shadow-sm border border-slate-200">
                <h2 class="text-2xl font-bold text-maroon mb-4">Part 2: Set Up Google Tasks</h2>
                <div class="space-y-6">
                    <div>
                        <h3 class="font-semibold text-lg mb-2">1. Open Google Tasks</h3>
                        <p class="text-slate-700">Access Google Tasks via the side panel in your UMN Gmail or Calendar.</p>
                    </div>
                    <div class="border-t border-yellow-800/20 pt-6">
                        <h3 class="font-semibold text-lg mb-2">2. Create the Task List</h3>
                        <p class="text-slate-700">Create a new list. It <span class="font-bold text-red-600">must</span> be named exactly <code class="bg-slate-100 text-sm font-mono p-1 rounded">MBA To Do</code> for the script to function correctly.</p>
                    </div>
                </div>
            </section>

            <!-- Part 3: Set Up the Automation Script -->
            <section style="background-color: #FAEAB6;" class="p-6 rounded-xl shadow-sm border border-slate-200">
                <h2 class="text-2xl font-bold text-maroon mb-4">Part 3: Set Up the Automation Script</h2>
                <div class="space-y-6">
                    <div>
                        <h3 class="font-semibold text-lg mb-2">1. Open the Script Editor</h3>
                        <p class="text-slate-700">In your Google Sheet, navigate to <code class="bg-slate-100 text-sm font-mono p-1 rounded">Extensions > Apps Script</code>.</p>
                    </div>
                    
                    <div class="border-t border-yellow-800/20 pt-6">
                        <h3 class="font-semibold text-lg mb-2">2. Paste the Code</h3>
                        <p class="text-slate-700 mb-3">Delete any existing content in the <code class="bg-slate-100 text-sm font-mono p-1 rounded">Code.gs</code> file and paste the entire script below.</p>
                        <div class="relative">
                            <button id="copy-button" class="absolute top-2 right-2 bg-slate-600 text-white text-xs font-semibold px-3 py-1 rounded-md hover:bg-slate-700 transition-colors">Copy Code</button>
                            <pre class="bg-slate-800 text-white text-sm p-4 rounded-lg overflow-x-auto"><code id="script-code" class="language-javascript">
// PASTE THE ENTIRE SCRIPT CODE HERE
/**
 * @fileoverview This script automates the creation and updating of Google Tasks
 * directly from a Google Sheet. It uses the `Tasks` service by making direct
 * HTTP requests via UrlFetchApp. This version includes a centralized configuration
 * and handles API pagination for improved reliability and maintainability.
 */

// --- CONFIGURATION ---
const CONFIG = {
  SHEET_NAME: "Master Schedule",
  TASK_LIST_NAME: "MBA To Do",
  HEADER_ROWS: 4, 
  COLUMNS: {
    COMPLETED: 3, CLASS: 6, DUE_DATE: 8, ASSIGNMENT: 9, TASK_ID: 10
  },
  COLUMN_INDICES: {
    COMPLETED: 2, CLASS: 5, DUE_DATE: 7, ASSIGNMENT: 8, TASK_ID: 9
  }
};
// --- END CONFIGURATION ---

function createAllTasks() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(CONFIG.SHEET_NAME);
  const dataRange = sheet.getDataRange();
  const values = dataRange.getValues();
  const taskListId = getTaskListIdByName(CONFIG.TASK_LIST_NAME);

  if (!taskListId) {
    SpreadsheetApp.getUi().alert(`Could not find the '${CONFIG.TASK_LIST_NAME}' task list. Please create it in Google Tasks.`);
    return;
  }

  for (let i = CONFIG.HEADER_ROWS; i < values.length; i++) {
    const row = values[i];
    const taskId = row[CONFIG.COLUMN_INDICES.TASK_ID];
    const completedStatus = row[CONFIG.COLUMN_INDICES.COMPLETED];
    const classValue = row[CONFIG.COLUMN_INDICES.CLASS];
    const assignmentName = row[CONFIG.COLUMN_INDICES.ASSIGNMENT];
    let dateValue = row[CONFIG.COLUMN_INDICES.DUE_DATE];

    if (taskId || completedStatus || !classValue || !assignmentName || !dateValue) {
      continue;
    }

    if (typeof dateValue === 'string') {
      try { dateValue = new Date(dateValue); } catch (e) { continue; }
    }

    if (dateValue instanceof Date) {
      try {
        const due = Utilities.formatDate(dateValue, "GMT", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        const task = { title: `${classValue} - ${assignmentName}`, due: due };
        const response = UrlFetchApp.fetch(`https://www.googleapis.com/tasks/v1/lists/${taskListId}/tasks`, {
          method: 'post', contentType: 'application/json', payload: JSON.stringify(task),
          headers: { Authorization: `Bearer ${ScriptApp.getOAuthToken()}` }, muteHttpExceptions: true
        });

        if (response.getResponseCode() === 200) {
          const newTask = JSON.parse(response.getContentText());
          sheet.getRange(i + 1, CONFIG.COLUMNS.TASK_ID).setValue(newTask.id);
          console.log(`Successfully created task for row ${i + 1}.`);
        } else {
          console.error(`API Error for row ${i + 1}: Status ${response.getResponseCode()}, Message: ${response.getContentText()}`);
        }
      } catch (e) { console.error(`Error creating task for row ${i + 1}: ${e.message}`); }
    }
  }
}

function onEdit(e) {
  const sheet = e.source.getActiveSheet();
  if (sheet.getName() !== CONFIG.SHEET_NAME) { return; }

  const editedRow = e.range.getRow();
  const editedCol = e.range.getColumn();
  if (editedRow <= CONFIG.HEADER_ROWS) { return; }

  const taskListId = getTaskListIdByName(CONFIG.TASK_LIST_NAME);
  if (!taskListId) { return; }

  if (editedCol === CONFIG.COLUMNS.COMPLETED) {
    const taskId = sheet.getRange(editedRow, CONFIG.COLUMNS.TASK_ID).getValue();
    if (taskId) {
      const isCompleted = e.value === 'TRUE';
      let payload = isCompleted ? { status: 'completed', completed: new Date().toISOString() } : { status: 'needsAction', completed: null };
      updateTaskInAPI(taskListId, taskId, payload);
    }
    return;
  }

  const updateColumns = [CONFIG.COLUMNS.CLASS, CONFIG.COLUMNS.DUE_DATE, CONFIG.COLUMNS.ASSIGNMENT];
  if (updateColumns.includes(editedCol)) {
    const taskId = sheet.getRange(editedRow, CONFIG.COLUMNS.TASK_ID).getValue();
    const completedStatus = sheet.getRange(editedRow, CONFIG.COLUMNS.COMPLETED).getValue();
    if (completedStatus) { return; }

    const classValue = sheet.getRange(editedRow, CONFIG.COLUMNS.CLASS).getValue();
    const assignmentName = sheet.getRange(editedRow, CONFIG.COLUMNS.ASSIGNMENT).getValue();
    const dateValue = sheet.getRange(editedRow, CONFIG.COLUMNS.DUE_DATE).getValue();

    if (taskId && (!assignmentName || !dateValue)) {
      deleteTaskInAPI(taskListId, taskId);
      sheet.getRange(editedRow, CONFIG.COLUMNS.TASK_ID).clearContent();
      return;
    }

    if (classValue && assignmentName && dateValue) {
      const payload = { title: `${classValue} - ${assignmentName}` };
      if (dateValue instanceof Date) {
        payload.due = Utilities.formatDate(dateValue, "GMT", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
      }

      if (taskId) {
        updateTaskInAPI(taskListId, taskId, payload);
      } else {
        createTaskForEditedRow(editedRow);
      }
    }
  }
}

function createTaskForEditedRow(row) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(CONFIG.SHEET_NAME);
  const taskListId = getTaskListIdByName(CONFIG.TASK_LIST_NAME);
  if (!taskListId) { return; }

  const classValue = sheet.getRange(row, CONFIG.COLUMNS.CLASS).getValue();
  const assignmentName = sheet.getRange(row, CONFIG.COLUMNS.ASSIGNMENT).getValue();
  let dateValue = sheet.getRange(row, CONFIG.COLUMNS.DUE_DATE).getValue();

  if (typeof dateValue === 'string') {
    try { dateValue = new Date(dateValue); } catch (e) { return; }
  }

  if (classValue && assignmentName && dateValue instanceof Date) {
    try {
      const task = {
        title: `${classValue} - ${assignmentName}`,
        due: Utilities.formatDate(dateValue, "GMT", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'")
      };
      const response = UrlFetchApp.fetch(`https://www.googleapis.com/tasks/v1/lists/${taskListId}/tasks`, {
        method: 'post', contentType: 'application/json', payload: JSON.stringify(task),
        headers: { Authorization: `Bearer ${ScriptApp.getOAuthToken()}` }, muteHttpExceptions: true
      });

      if (response.getResponseCode() === 200) {
        const newTask = JSON.parse(response.getContentText());
        sheet.getRange(row, CONFIG.COLUMNS.TASK_ID).setValue(newTask.id);
      }
    } catch (e) { console.error(`Error creating new task for row ${row}: ${e.message}`); }
  }
}

function updateTaskInAPI(taskListId, taskId, payload) {
  try {
    const response = UrlFetchApp.fetch(`https://www.googleapis.com/tasks/v1/lists/${taskListId}/tasks/${taskId}`, {
      method: 'patch', contentType: 'application/json', payload: JSON.stringify(payload),
      headers: { Authorization: `Bearer ${ScriptApp.getOAuthToken()}` }, muteHttpExceptions: true
    });
    if (response.getResponseCode() !== 200) {
      console.error(`Update failed for task ID: ${taskId}.`);
    }
  } catch (e) { console.warn(`Could not update task ID ${taskId}. Error: ${e.message}`); }
}

function deleteTaskInAPI(taskListId, taskId) {
  try {
    const response = UrlFetchApp.fetch(`https://www.googleapis.com/tasks/v1/lists/${taskListId}/tasks/${taskId}`, {
      method: 'delete', headers: { Authorization: `Bearer ${ScriptApp.getOAuthToken()}` }, muteHttpExceptions: true
    });
    if (response.getResponseCode() === 204) {
      console.log(`Successfully deleted task ID: ${taskId}.`);
    }
  } catch (e) { console.warn(`Could not delete task ID ${taskId}. Error: ${e.message}`); }
}

function getTaskListIdByName(listName) {
  try {
    let pageToken = null;
    do {
      let url = 'https://www.googleapis.com/tasks/v1/users/@me/lists?maxResults=100';
      if (pageToken) { url += `&pageToken=${pageToken}`; }
      const response = UrlFetchApp.fetch(url, {
        method: 'get', headers: { Authorization: `Bearer ${ScriptApp.getOAuthToken()}` }, muteHttpExceptions: true
      });

      const result = JSON.parse(response.getContentText());
      const lists = result.items;
      if (lists) {
        for (const list of lists) {
          if (list.title === listName) { return list.id; }
        }
      }
      pageToken = result.nextPageToken;
    } while (pageToken);
  } catch (e) { console.error(`Error retrieving task lists: ${e.message}`); }
  return null;
}

function syncTasks() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(CONFIG.SHEET_NAME);
  const dataRange = sheet.getDataRange();
  const values = dataRange.getValues();
  const taskListId = getTaskListIdByName(CONFIG.TASK_LIST_NAME);
  if (!taskListId) { return; }

  const sheetTaskIds = new Set();
  for (let i = CONFIG.HEADER_ROWS; i < values.length; i++) {
    const taskId = values[i][CONFIG.COLUMN_INDICES.TASK_ID];
    if (taskId) { sheetTaskIds.add(taskId); }
  }

  try {
    let allTasks = [];
    let pageToken = null;
    do {
      let url = `https://www.googleapis.com/tasks/v1/lists/${taskListId}/tasks?maxResults=100`;
      if (pageToken) { url += `&pageToken=${pageToken}`; }
      const response = UrlFetchApp.fetch(url, {
        method: 'get', headers: { Authorization: `Bearer ${ScriptApp.getOAuthToken()}` }, muteHttpExceptions: true
      });
      if (response.getResponseCode() !== 200) { return; }
      const results = JSON.parse(response.getContentText());
      if (results.items) { allTasks = allTasks.concat(results.items); }
      pageToken = results.nextPageToken;
    } while (pageToken);

    for (const task of allTasks) {
      if (!sheetTaskIds.has(task.id)) {
        deleteTaskInAPI(taskListId, task.id);
      }
    }
  } catch (e) { console.error(`Error during task synchronization: ${e.message}`); }
}
                            </code></pre>
                        </div>
                    </div>

                    <div class="border-t border-yellow-800/20 pt-6">
                        <h3 class="font-semibold text-lg mb-2">3. Save the Script</h3>
                        <p class="text-slate-700">Click the <span class="font-bold">Save project</span> icon (floppy disk) at the top of the editor.</p>
                    </div>

                    <div class="border-t border-yellow-800/20 pt-6">
                        <h3 class="font-semibold text-lg mb-2">4. Connect the Google Tasks Service</h3>
                        <p class="text-slate-700">On the left sidebar, next to "Services", click the <code class="bg-slate-100 text-sm font-mono p-1 rounded">+</code> icon. Find and add the <code class="bg-slate-100 text-sm font-mono p-1 rounded">Google Tasks API</code>.</p>
                    </div>

                    <div class="border-t border-yellow-800/20 pt-6">
                        <h3 class="font-semibold text-lg mb-2">5. Authorize the Script (Most Important Step)</h3>
                        <ol class="list-decimal list-inside text-slate-700 space-y-2">
                            <li>Ensure <code class="bg-slate-100 text-sm font-mono p-1 rounded">createAllTasks</code> is selected in the function dropdown, then click <span class="font-bold">Run</span>.</li>
                            <li>A popup will appear. Click <span class="font-bold">Review permissions</span> and choose your UMN Google account.</li>
                            <li>You will see a warning screen. This is normal. Click <span class="font-bold">Advanced</span>, then click <span class="font-bold">Go to [Your Project Name] (unsafe)</span>.</li>
                            <li>On the final screen, click <span class="font-bold">Allow</span>. Authorization is now complete.</li>
                        </ol>
                    </div>
                </div>
            </section>
            
            <!-- Part 4: Set Up Automatic Sync -->
            <section style="background-color: #FAEAB6;" class="p-6 rounded-xl shadow-sm border border-slate-200">
                <h2 class="text-2xl font-bold text-maroon mb-4">Part 4: Set Up Automatic Sync</h2>
                 <p class="text-slate-700 mb-4">This optional step creates a daily trigger to clean up tasks in Google Tasks if you delete their corresponding row in the sheet.</p>
                <div class="space-y-6">
                    <div>
                        <h3 class="font-semibold text-lg mb-2">1. Open Triggers</h3>
                        <p class="text-slate-700">In the Apps Script editor, click the <span class="font-bold">Triggers</span> icon (a clock) on the left sidebar.</p>
                    </div>
                    <div class="border-t border-yellow-800/20 pt-6">
                        <h3 class="font-semibold text-lg mb-2">2. Add a New Trigger</h3>
                        <p class="text-slate-700">Click <span class="font-bold">+ Add Trigger</span> and configure it with these settings:</p>
                        <ul class="list-disc list-inside text-slate-700 mt-2 space-y-1 bg-amber-50 p-4 rounded-lg">
                            <li>Function to run: <code class="bg-amber-200 text-sm font-mono p-1 rounded">syncTasks</code></li>
                            <li>Event source: <code class="bg-amber-200 text-sm font-mono p-1 rounded">Time-driven</code></li>
                            <li>Time-based trigger type: <code class="bg-amber-200 text-sm font-mono p-1 rounded">Day timer</code></li>
                            <li>Time of day: <code class="bg-amber-200 text-sm font-mono p-1 rounded">Midnight to 1am</code> (or your preference)</li>
                        </ul>
                    </div>
                </div>
            </section>
            
            <!-- Part 5: How to Use -->
            <section style="background-color: #FAEAB6;" class="p-6 rounded-xl shadow-sm border border-slate-200">
                <h2 class="text-2xl font-bold text-maroon mb-4">Part 5: How to Use Your New System</h2>
                <p class="text-slate-700">You're all set! The automation is active. Here's how it works:</p>
                <ul class="list-disc list-inside text-slate-700 mt-4 space-y-2">
                    <li><span class="font-semibold">To ADD a task:</span> Fill out the `Class`, `Due Date`, and `Assignment` columns. A task is created automatically.</li>
                    <li><span class="font-semibold">To COMPLETE a task:</span> Check the box in the `Completed?` column. The task is marked as done.</li>
                    <li><span class="font-semibold">To DELETE a task:</span> Clear the `Assignment` or `Due Date` cell for that row. The task is removed from your list.</li>
                </ul>
            </section>

        </div>
        
        <footer class="text-center mt-12 text-slate-500 text-sm">
            <p>This guide was created to simplify your workflow at the Carlson School of Management.</p>
            <p> Created by Emily Johnson with help of Google Gemini </p>
        </footer>

    </div>

    <script>
        // JavaScript for the copy button
        const copyButton = document.getElementById('copy-button');
        const scriptCode = document.getElementById('script-code');

        copyButton.addEventListener('click', () => {
            // Using a textarea element to preserve formatting
            const textArea = document.createElement('textarea');
            textArea.value = scriptCode.textContent.trim();
            document.body.appendChild(textArea);
            textArea.select();
            try {
                // Use the deprecated execCommand for broader browser support in iFrames
                document.execCommand('copy');
                copyButton.textContent = 'Copied!';
            } catch (err) {
                console.error('Failed to copy text: ', err);
                copyButton.textContent = 'Error';
            }
            document.body.removeChild(textArea);

            // Reset button text after a short delay
            setTimeout(() => {
                copyButton.textContent = 'Copy Code';
            }, 2000);
        });
    </script>

</body>
</ht
